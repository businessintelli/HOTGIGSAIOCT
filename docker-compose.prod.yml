version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: hotgigs-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hotgigs_db}
      POSTGRES_USER: ${POSTGRES_USER:-hotgigs_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hotgigs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hotgigs_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend/hotgigs-api
      dockerfile: Dockerfile
    container_name: hotgigs-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-hotgigs_user}:${POSTGRES_PASSWORD:-changeme123}@database:5432/${POSTGRES_DB:-hotgigs_db}
      
      # Supabase (if using)
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      
      # Email Service
      RESEND_API_KEY: ${RESEND_API_KEY}
      SENDER_EMAIL: ${SENDER_EMAIL:-noreply@hotgigs.com}
      
      # JWT
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      
      # App
      DEBUG: ${DEBUG:-false}
    ports:
      - "8000:8000"
    networks:
      - hotgigs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./hotgigs-frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: hotgigs-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - hotgigs-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

networks:
  hotgigs-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local


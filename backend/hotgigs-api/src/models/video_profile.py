"""
Video Profile Models
Handles candidate video introductions, AI analysis, and smart indexing
"""

from sqlalchemy import Column, String, Integer, Float, Boolean, Text, DateTime, ForeignKey, JSON, Enum
from sqlalchemy.orm import relationship
from datetime import datetime
import uuid
import enum

from src.db.base import Base


class VideoStatus(str, enum.Enum):
    """Video processing status"""
    UPLOADING = "uploading"
    PROCESSING = "processing"
    ANALYZING = "analyzing"
    COMPLETED = "completed"
    FAILED = "failed"


class VideoProfile(Base):
    """
    Main video profile model
    Stores candidate video introductions and metadata
    """
    __tablename__ = "video_profiles"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    candidate_id = Column(String, ForeignKey("candidates.id"), nullable=False)
    
    # Video metadata
    title = Column(String(255), nullable=False)
    description = Column(Text)
    video_url = Column(String(500), nullable=False)
    thumbnail_url = Column(String(500))
    duration_seconds = Column(Integer)  # Video duration in seconds
    file_size_mb = Column(Float)
    
    # Processing status
    status = Column(Enum(VideoStatus), default=VideoStatus.UPLOADING)
    processing_progress = Column(Integer, default=0)  # 0-100
    error_message = Column(Text)
    
    # AI Analysis results
    transcript = Column(Text)  # Full video transcript
    ai_summary = Column(Text)  # AI-generated summary
    communication_score = Column(Float)  # 0-100
    confidence_score = Column(Float)  # 0-100
    professionalism_score = Column(Float)  # 0-100
    overall_score = Column(Float)  # 0-100
    
    # Extracted information
    skills_mentioned = Column(JSON)  # List of skills mentioned in video
    key_highlights = Column(JSON)  # Important moments/quotes
    sentiment_analysis = Column(JSON)  # Sentiment throughout video
    
    # Video settings
    is_public = Column(Boolean, default=True)
    allow_download = Column(Boolean, default=False)
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    processed_at = Column(DateTime)
    
    # Relationships
    candidate = relationship("Candidate", back_populates="video_profiles")
    chapters = relationship("VideoChapter", back_populates="video_profile", cascade="all, delete-orphan")
    highlights = relationship("VideoHighlight", back_populates="video_profile", cascade="all, delete-orphan")
    analytics = relationship("VideoAnalytics", back_populates="video_profile", cascade="all, delete-orphan")


class VideoChapter(Base):
    """
    Video chapters for easy navigation
    Auto-generated by AI based on content
    """
    __tablename__ = "video_chapters"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    video_profile_id = Column(String, ForeignKey("video_profiles.id"), nullable=False)
    
    title = Column(String(255), nullable=False)
    description = Column(Text)
    start_time = Column(Integer, nullable=False)  # Seconds from start
    end_time = Column(Integer, nullable=False)
    
    # Chapter metadata
    chapter_type = Column(String(50))  # intro, skills, experience, projects, goals, etc.
    skills_discussed = Column(JSON)  # Skills mentioned in this chapter
    importance_score = Column(Float)  # 0-1, how important this chapter is
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    video_profile = relationship("VideoProfile", back_populates="chapters")


class VideoHighlight(Base):
    """
    Key moments/highlights in the video
    Short clips that showcase specific skills or achievements
    """
    __tablename__ = "video_highlights"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    video_profile_id = Column(String, ForeignKey("video_profiles.id"), nullable=False)
    
    title = Column(String(255), nullable=False)
    description = Column(Text)
    start_time = Column(Integer, nullable=False)
    end_time = Column(Integer, nullable=False)
    
    # Highlight metadata
    highlight_type = Column(String(50))  # skill_demo, achievement, project, personality, etc.
    related_skill = Column(String(100))
    confidence_score = Column(Float)  # How confident AI is about this highlight
    
    # Clip generation
    clip_url = Column(String(500))  # URL to short clip if generated
    thumbnail_url = Column(String(500))
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    video_profile = relationship("VideoProfile", back_populates="highlights")


class VideoAnalytics(Base):
    """
    Detailed analytics for video performance
    Tracks views, engagement, and recruiter interactions
    """
    __tablename__ = "video_analytics"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    video_profile_id = Column(String, ForeignKey("video_profiles.id"), nullable=False)
    
    # View statistics
    total_views = Column(Integer, default=0)
    unique_viewers = Column(Integer, default=0)
    avg_watch_time = Column(Integer)  # Average seconds watched
    completion_rate = Column(Float)  # Percentage who watched to end
    
    # Engagement metrics
    chapter_views = Column(JSON)  # Views per chapter
    most_replayed_sections = Column(JSON)  # Sections that were replayed
    skip_patterns = Column(JSON)  # Where viewers skip
    
    # Recruiter interactions
    recruiter_views = Column(Integer, default=0)
    shortlisted_count = Column(Integer, default=0)
    interview_requests = Column(Integer, default=0)
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    video_profile = relationship("VideoProfile", back_populates="analytics")


class VideoFeedback(Base):
    """
    AI-generated feedback and coaching for candidates
    Helps candidates improve their video presentations
    """
    __tablename__ = "video_feedback"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    video_profile_id = Column(String, ForeignKey("video_profiles.id"), nullable=False)
    
    # Feedback categories
    communication_feedback = Column(JSON)  # Speaking pace, clarity, filler words
    content_feedback = Column(JSON)  # Structure, completeness, relevance
    presentation_feedback = Column(JSON)  # Body language, eye contact, energy
    technical_feedback = Column(JSON)  # Audio/video quality issues
    
    # Improvement suggestions
    strengths = Column(JSON)  # What candidate did well
    areas_for_improvement = Column(JSON)  # What to improve
    actionable_tips = Column(JSON)  # Specific tips
    
    # Comparison data
    percentile_rank = Column(Float)  # How this video compares to others
    similar_successful_profiles = Column(JSON)  # Examples to learn from
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    video_profile = relationship("VideoProfile")


class VideoRecordingSession(Base):
    """
    Tracks video recording sessions and practice attempts
    Helps candidates improve before final submission
    """
    __tablename__ = "video_recording_sessions"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    candidate_id = Column(String, ForeignKey("candidates.id"), nullable=False)
    
    # Session metadata
    session_type = Column(String(50))  # practice, final, retake
    duration_seconds = Column(Integer)
    
    # Real-time feedback during recording
    speaking_pace_avg = Column(Float)  # Words per minute
    filler_words_count = Column(Integer)
    audio_quality_score = Column(Float)
    video_quality_score = Column(Float)
    
    # Session outcome
    was_submitted = Column(Boolean, default=False)
    video_profile_id = Column(String, ForeignKey("video_profiles.id"))
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    candidate = relationship("Candidate")
    video_profile = relationship("VideoProfile")


class VideoComparison(Base):
    """
    Side-by-side video comparisons for recruiters
    Helps recruiters compare multiple candidates
    """
    __tablename__ = "video_comparisons"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    recruiter_id = Column(String, ForeignKey("users.id"), nullable=False)
    job_id = Column(String, ForeignKey("jobs.id"))
    
    # Comparison data
    video_profile_ids = Column(JSON)  # List of video IDs being compared
    comparison_notes = Column(Text)
    
    # Comparison results
    ranking = Column(JSON)  # Recruiter's ranking of candidates
    selected_candidate_id = Column(String)
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    recruiter = relationship("User")
    job = relationship("Job")

